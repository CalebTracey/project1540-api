// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package s3 is a generated GoMock package.
package s3

import (
	context "context"
	models "project1540-api/external/models"
	s30 "project1540-api/external/models/s3"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockIDAO is a mock of IDAO interface.
type MockIDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIDAOMockRecorder
}

// MockIDAOMockRecorder is the mock recorder for MockIDAO.
type MockIDAOMockRecorder struct {
	mock *MockIDAO
}

// NewMockIDAO creates a new mock instance.
func NewMockIDAO(ctrl *gomock.Controller) *MockIDAO {
	mock := &MockIDAO{ctrl: ctrl}
	mock.recorder = &MockIDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDAO) EXPECT() *MockIDAOMockRecorder {
	return m.recorder
}

// GetAllObjectNames mocks base method.
func (m *MockIDAO) GetAllObjectNames(ctx context.Context, bucketName string) ([]string, *models.ErrorLog) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllObjectNames", ctx, bucketName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*models.ErrorLog)
	return ret0, ret1
}

// GetAllObjectNames indicates an expected call of GetAllObjectNames.
func (mr *MockIDAOMockRecorder) GetAllObjectNames(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllObjectNames", reflect.TypeOf((*MockIDAO)(nil).GetAllObjectNames), ctx, bucketName)
}

// GetObject mocks base method.
func (m *MockIDAO) GetObject(ctx context.Context, request s30.DownloadS3Request) (*s3.GetObjectOutput, *models.ErrorLog) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, request)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(*models.ErrorLog)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockIDAOMockRecorder) GetObject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockIDAO)(nil).GetObject), ctx, request)
}

// PutObject mocks base method.
func (m *MockIDAO) PutObject(ctx context.Context, input s30.UploadS3Request) *models.ErrorLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, input)
	ret0, _ := ret[0].(*models.ErrorLog)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockIDAOMockRecorder) PutObject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockIDAO)(nil).PutObject), ctx, input)
}
