// Code generated by MockGen. DO NOT EDIT.
// Source: facade.go

// Package facade is a generated GoMock package.
package facade

import (
	context "context"
	models "project1540-api/external/models"
	postgres "project1540-api/external/models/postgres"
	s30 "project1540-api/external/models/s3"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockIFacade is a mock of IFacade interface.
type MockIFacade struct {
	ctrl     *gomock.Controller
	recorder *MockIFacadeMockRecorder
}

// MockIFacadeMockRecorder is the mock recorder for MockIFacade.
type MockIFacadeMockRecorder struct {
	mock *MockIFacade
}

// NewMockIFacade creates a new mock instance.
func NewMockIFacade(ctrl *gomock.Controller) *MockIFacade {
	mock := &MockIFacade{ctrl: ctrl}
	mock.recorder = &MockIFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFacade) EXPECT() *MockIFacadeMockRecorder {
	return m.recorder
}

// DownloadS3Object mocks base method.
func (m *MockIFacade) DownloadS3Object(ctx context.Context, request s30.DownloadS3Request) (*s3.GetObjectOutput, *models.ErrorLog) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadS3Object", ctx, request)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(*models.ErrorLog)
	return ret0, ret1
}

// DownloadS3Object indicates an expected call of DownloadS3Object.
func (mr *MockIFacadeMockRecorder) DownloadS3Object(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadS3Object", reflect.TypeOf((*MockIFacade)(nil).DownloadS3Object), ctx, request)
}

// ExtractTags mocks base method.
func (m *MockIFacade) ExtractTags(fileName string) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTags", fileName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtractTags indicates an expected call of ExtractTags.
func (mr *MockIFacadeMockRecorder) ExtractTags(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTags", reflect.TypeOf((*MockIFacade)(nil).ExtractTags), fileName)
}

// GetS3ObjectNames mocks base method.
func (m *MockIFacade) GetS3ObjectNames(ctx context.Context, bucketName string) ([]string, *models.ErrorLog) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3ObjectNames", ctx, bucketName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*models.ErrorLog)
	return ret0, ret1
}

// GetS3ObjectNames indicates an expected call of GetS3ObjectNames.
func (mr *MockIFacadeMockRecorder) GetS3ObjectNames(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3ObjectNames", reflect.TypeOf((*MockIFacade)(nil).GetS3ObjectNames), ctx, bucketName)
}

// InsertNewFileByS3Bucket mocks base method.
func (m *MockIFacade) InsertNewFileByS3Bucket(ctx context.Context, req postgres.NewFileRequest) *models.ErrorLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewFileByS3Bucket", ctx, req)
	ret0, _ := ret[0].(*models.ErrorLog)
	return ret0
}

// InsertNewFileByS3Bucket indicates an expected call of InsertNewFileByS3Bucket.
func (mr *MockIFacadeMockRecorder) InsertNewFileByS3Bucket(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewFileByS3Bucket", reflect.TypeOf((*MockIFacade)(nil).InsertNewFileByS3Bucket), ctx, req)
}

// InsertNewFileDetails mocks base method.
func (m *MockIFacade) InsertNewFileDetails(ctx context.Context, fileName, fileType, url string, tags []string) *models.ErrorLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewFileDetails", ctx, fileName, fileType, url, tags)
	ret0, _ := ret[0].(*models.ErrorLog)
	return ret0
}

// InsertNewFileDetails indicates an expected call of InsertNewFileDetails.
func (mr *MockIFacadeMockRecorder) InsertNewFileDetails(ctx, fileName, fileType, url, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewFileDetails", reflect.TypeOf((*MockIFacade)(nil).InsertNewFileDetails), ctx, fileName, fileType, url, tags)
}

// SearchFilesByTag mocks base method.
func (m *MockIFacade) SearchFilesByTag(ctx context.Context, tags []string) postgres.FileResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesByTag", ctx, tags)
	ret0, _ := ret[0].(postgres.FileResponse)
	return ret0
}

// SearchFilesByTag indicates an expected call of SearchFilesByTag.
func (mr *MockIFacadeMockRecorder) SearchFilesByTag(ctx, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesByTag", reflect.TypeOf((*MockIFacade)(nil).SearchFilesByTag), ctx, tags)
}

// UpdateDatabaseFromS3Bucket mocks base method.
func (m *MockIFacade) UpdateDatabaseFromS3Bucket(ctx context.Context, bucket string) *models.ErrorLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabaseFromS3Bucket", ctx, bucket)
	ret0, _ := ret[0].(*models.ErrorLog)
	return ret0
}

// UpdateDatabaseFromS3Bucket indicates an expected call of UpdateDatabaseFromS3Bucket.
func (mr *MockIFacadeMockRecorder) UpdateDatabaseFromS3Bucket(ctx, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseFromS3Bucket", reflect.TypeOf((*MockIFacade)(nil).UpdateDatabaseFromS3Bucket), ctx, bucket)
}

// UploadS3Object mocks base method.
func (m *MockIFacade) UploadS3Object(ctx context.Context, request s30.UploadS3Request) *models.ErrorLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadS3Object", ctx, request)
	ret0, _ := ret[0].(*models.ErrorLog)
	return ret0
}

// UploadS3Object indicates an expected call of UploadS3Object.
func (mr *MockIFacadeMockRecorder) UploadS3Object(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadS3Object", reflect.TypeOf((*MockIFacade)(nil).UploadS3Object), ctx, request)
}
